<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.geungeunhanjan.mapper.admin.admin_memberListMapper">
    <!-- 검색한 공지 전체 리스트를 조회하는 쿼리문 -->
    <select id="adminSelectMember" resultType="MemberDTO" parameterType="map">
        <![CDATA[
        SELECT
            UNI_ID,
            NICKNAME,
            NAME,
            EMAIL,
            BIRTH,
            STATUS
        FROM (
                 SELECT
                     u.UNI_ID,
                     CASE WHEN u.USER_ID IS NOT NULL THEN usr.USER_NICKNAME ELSE k.NAME END AS NICKNAME,
                     CASE WHEN u.USER_ID IS NOT NULL THEN usr.USER_NAME ELSE k.NAME END AS NAME,
                     CASE WHEN u.USER_ID IS NOT NULL THEN usr.USER_EMAIL ELSE k.PROVIDER_ID END AS EMAIL,
                     CASE WHEN u.USER_ID IS NOT NULL THEN usr.USER_BIRTH ELSE k.KAKAO_BIRTH END AS BIRTH,
                     u.UNI_STATUS AS STATUS,
                     ROW_NUMBER() OVER (ORDER BY u.UNI_ID) AS RN
                 FROM
                     GGHJ_UNI u
                         LEFT JOIN
                     GGHJ_USER usr ON u.USER_ID = usr.USER_ID
                         LEFT JOIN
                     GGHJ_KAKAO k ON u.KAKAO_ID = k.KAKAO_ID
                 WHERE
                     u.UNI_ID LIKE '%' || #{keyword} || '%'
                    OR (CASE WHEN u.USER_ID IS NOT NULL THEN usr.USER_NICKNAME ELSE k.NAME END) LIKE '%' || #{keyword} || '%'
                    OR (CASE WHEN u.USER_ID IS NOT NULL THEN usr.USER_NAME ELSE k.NAME END) LIKE '%' || #{keyword} || '%'
                    OR (CASE WHEN u.USER_ID IS NOT NULL THEN usr.USER_EMAIL ELSE k.PROVIDER_ID END) LIKE '%' || #{keyword} || '%'
                    OR u.UNI_STATUS LIKE '%' || #{keyword} || '%'
             )
        WHERE RN BETWEEN ((#{page} - 1) * #{amount} + 1) AND (#{page} * #{amount})
        ]]>
    </select>
<!--    전체 페이징 처리만 된 쿼리문  -->
    <select id="selectAllPageMember" parameterType="NoticeCriteria" resultType="MemberDTO">
        <![CDATA[
        SELECT
            UNI_ID,
            NICKNAME,
            NAME,
            EMAIL,
            BIRTH,
            STATUS
        FROM (
                 SELECT
                     u.UNI_ID,
                     CASE WHEN u.USER_ID IS NOT NULL THEN usr.USER_NICKNAME ELSE k.NAME END AS NICKNAME,
                     CASE WHEN u.USER_ID IS NOT NULL THEN usr.USER_NAME ELSE k.NAME END AS NAME,
                     CASE WHEN u.USER_ID IS NOT NULL THEN usr.USER_EMAIL ELSE k.PROVIDER_ID END AS EMAIL,
                     CASE WHEN u.USER_ID IS NOT NULL THEN usr.USER_BIRTH ELSE k.KAKAO_BIRTH END AS BIRTH,
                     u.UNI_STATUS AS STATUS,
                     ROW_NUMBER() OVER (ORDER BY u.UNI_ID) AS RN
                 FROM
                     GGHJ_UNI u
                         LEFT JOIN
                     GGHJ_USER usr ON u.USER_ID = usr.USER_ID
                         LEFT JOIN
                     GGHJ_KAKAO k ON u.KAKAO_ID = k.KAKAO_ID
             )
        WHERE RN BETWEEN ((#{page} - 1) * #{amount} + 1) AND (#{page} * #{amount})
        ]]>
    </select>
<!--    회원 수 조회하기 -->
    <select id="selectTotalMember" resultType="int">
        SELECT COUNT(*) FROM GGHJ_UNI
    </select>
    <!-- 유저의 상태 변경하기 -->
<!--  일반  -->
    <update id="updateStatusGeneral" parameterType="long">
        UPDATE GGHJ_UNI
        SET UNI_STATUS = '일반'
        WHERE UNI_ID = #{uni_id}
    </update>
<!-- 정지 -->
    <update id="updateStatusSuspension" parameterType="long">
        UPDATE GGHJ_UNI
        SET UNI_STATUS = '정지'
        WHERE UNI_ID = #{uni_id}
    </update>
<!-- 탈퇴 -->
    <update id="updateStatuswithdrawal" parameterType="long">
        UPDATE GGHJ_UNI
        SET UNI_STATUS = '탈퇴'
        WHERE UNI_ID = #{uni_id}
    </update>
<!--    검색했을 때 리스트 개수 조회 -->
    <select id="countSearchKeyword" parameterType="String">
        SELECT COUNT(*)
        FROM (SELECT u.UNI_ID,
                     CASE WHEN u.USER_ID IS NOT NULL THEN usr.USER_NICKNAME ELSE k.NAME END     AS NICKNAME,
                     CASE WHEN u.USER_ID IS NOT NULL THEN usr.USER_NAME ELSE k.NAME END         AS NAME,
                     CASE WHEN u.USER_ID IS NOT NULL THEN usr.USER_EMAIL ELSE k.PROVIDER_ID END AS EMAIL,
                     CASE WHEN u.USER_ID IS NOT NULL THEN usr.USER_BIRTH ELSE k.KAKAO_BIRTH END AS BIRTH,
                     u.UNI_STATUS                                                               AS STATUS,
                     ROW_NUMBER()                                                                  OVER (ORDER BY u.UNI_ID) AS RN
              FROM GGHJ_UNI u
                       LEFT JOIN
                   GGHJ_USER usr ON u.USER_ID = usr.USER_ID
                       LEFT JOIN
                   GGHJ_KAKAO k ON u.KAKAO_ID = k.KAKAO_ID
              WHERE u.UNI_ID LIKE '%' || #{keyword} || '%'
                 OR (CASE WHEN u.USER_ID IS NOT NULL THEN usr.USER_NICKNAME ELSE k.NAME END) LIKE '%' || #{keyword} || '%'
                 OR (CASE WHEN u.USER_ID IS NOT NULL THEN usr.USER_NAME ELSE k.NAME END) LIKE '%' || #{keyword} || '%'
                 OR (CASE WHEN u.USER_ID IS NOT NULL THEN usr.USER_EMAIL ELSE k.PROVIDER_ID END) LIKE '%' || #{keyword} || '%'
                 OR u.UNI_STATUS LIKE '%' || #{keyword} || '%')
    </select>
</mapper>